name: Publish Release

# on:
#   workflow_dispatch: // // On process if you want use semantic release
on:
  push:
    branches:
      - main
  
permissions:
  contents: write

jobs:
  publish:
    if: contains(github.event.head_commit.message, '/release/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm ci

      - name: Publish to NPM
        # run: npx semantic-release --branches "main" --plugins "@semantic-release/npm,@semantic-release/github" // On process if you want use semantic release
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Extract version from commit message
        id: extract_version
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          if [[ "$COMMIT_MSG" =~ /release/v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "✅ Found version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "❌ No version found in commit message."
            exit 1
          fi

      - name: Read changelog
        id: changelog
        run: |
          CHANGELOG=$(npx conventional-changelog -p angular -r 1)
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_CLASSIC }}
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          BODY=$(jq -Rs '.' <<< "${{ steps.changelog.outputs.log }}")
          curl -X POST https://api.github.com/repos/${{ github.repository }}/releases \
            -H "Authorization: token ${GH_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg tag_name "v$VERSION" \
              --arg target_commitish "main" \
              --arg name "v$VERSION" \
              --argjson body "$BODY" \
              '{
                tag_name: $tag_name,
                target_commitish: $target_commitish,
                name: $name,
                body: $body,
                draft: false,
                prerelease: false
              }')"
