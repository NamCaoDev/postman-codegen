{{#if (eq generateType "seperate")}}
{{#if responseType}}
import { {{ responseType }} } from "./apiResponses";
{{/if}}
{{#if (and responseType isGenerateZod)}}
import { {{ zodPascalCase name }}ResponseSchema } from "./apiResponses.zod";
{{/if}}
import customFetch from "{{fetcher}}";

{{#if hasItems}}type ResponseCollectionData<T = unknown> = T & { _meta?: { currentPage?: number } };{{/if}}
{{/if}}

export const {{ camelCase name }}QueryOptions = () => ({
  queryKey: ['{{ name }}'],
  queryFn: async () => {
    const res = await customFetch{{#if responseType}}<{{ responseType }}>{{/if}}({
      url: '{{ apiPath }}',
      method: '{{ method }}' 
    });
    const resWithParse = {{#if (and responseType isGenerateZod)}}{{ zodPascalCase name }}ResponseSchema.parse(res)
    {{else}}
    res{{#if responseType}} as {{ responseType }}{{/if}}
    {{/if}}
    return resWithParse
  },
});

export const {{ camelCase name }}QueryKeys = () => {
  return ['{{ name }}'];
} 

{{#if hasItems}}
// Infinite Query
export const {{ camelCase infiniteQueryName }}InfiniteQueryOptions = () => ({
  queryKey: ['{{ infiniteQueryName }}'],
  queryFn: async ({ pageParam = 1 }) => {
    const queryString = querystring.stringify({page: pageParam});

    const res = await customFetch{{#if responseType}}<{{ responseType }}>{{/if}}({
      url: `{{ apiPath }}` + (queryString ? `?${queryString}` : ''),
      method: 'GET' 
    });

    const resWithParse = {{#if (and responseType isGenerateZod)}}{{ zodPascalCase name }}ResponseSchema.parse(res)
    {{else}}
    res{{#if responseType}} as {{ responseType }}{{/if}}
    {{/if}}

    const resData = resWithParse?.data as ResponseCollectionData;

    return {
      data: resWithParse,
      nextPage: resData?._meta?.currentPage ? resData?._meta?.currentPage + 1 : null
    };
  }
});

export const {{ camelCase infiniteQueryName }}QueryKeys = () => {
  return ['{{ infiniteQueryName }}'];
} 
{{/if}}
